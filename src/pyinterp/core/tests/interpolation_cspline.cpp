// Copyright (c) 2024 CNES
//
// All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
#include <gtest/gtest.h>

#include "pyinterp/detail/interpolation/cspline.hpp"
#include "pyinterp/detail/interpolation/cspline_periodic.hpp"

TEST(CSpline, case_one) {
  Eigen::Matrix<double, Eigen::Dynamic, 1> xa(6);
  Eigen::Matrix<double, Eigen::Dynamic, 1> ya(6);
  Eigen::Matrix<double, Eigen::Dynamic, 1> xp(50);
  Eigen::Matrix<double, Eigen::Dynamic, 1> yp(50);
  Eigen::Matrix<double, Eigen::Dynamic, 1> dyp(50);

  xa << 0.0, 0.2, 0.4, 0.6, 0.8, 1.0;
  ya << 1.0, 0.961538461538461, 0.862068965517241, 0.735294117647059,
      0.609756097560976, 0.500000000000000;

  xp << 0.00, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18, 0.20, 0.22,
      0.24, 0.26, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42, 0.44, 0.46,
      0.48, 0.50, 0.52, 0.54, 0.56, 0.58, 0.60, 0.62, 0.64, 0.66, 0.68, 0.70,
      0.72, 0.74, 0.76, 0.78, 0.80, 0.82, 0.84, 0.86, 0.88, 0.90, 0.92, 0.94,
      0.96, 0.98;
  yp << 1.000000000000000, 0.997583282975581, 0.995079933416512,
      0.992403318788142, 0.989466806555819, 0.986183764184894,
      0.982467559140716, 0.978231558888635, 0.973389130893999,
      0.967853642622158, 0.961538461538461, 0.954382579685350,
      0.946427487413627, 0.937740299651188, 0.928388131325928,
      0.918438097365742, 0.907957312698524, 0.897012892252170,
      0.885671950954575, 0.874001603733634, 0.862068965517241,
      0.849933363488199, 0.837622973848936, 0.825158185056786,
      0.812559385569085, 0.799846963843167, 0.787041308336369,
      0.774162807506023, 0.761231849809467, 0.748268823704033,
      0.735294117647059, 0.722328486073082, 0.709394147325463,
      0.696513685724764, 0.683709685591549, 0.671004731246381,
      0.658421407009825, 0.645982297202442, 0.633709986144797,
      0.621627058157454, 0.609756097560976, 0.598112015427308,
      0.586679029833925, 0.575433685609685, 0.564352527583445,
      0.553412100584061, 0.542588949440392, 0.531859618981294,
      0.521200654035625, 0.510588599432241;

  dyp << -0.120113913432180, -0.122279726798445, -0.128777166897241,
      -0.139606233728568, -0.154766927292426, -0.174259247588814,
      -0.198083194617734, -0.226238768379184, -0.258725968873165,
      -0.295544796099676, -0.336695250058719, -0.378333644186652,
      -0.416616291919835, -0.451543193258270, -0.483114348201955,
      -0.511329756750890, -0.536189418905076, -0.557693334664512,
      -0.575841504029200, -0.590633926999137, -0.602070603574326,
      -0.611319695518765, -0.619549364596455, -0.626759610807396,
      -0.632950434151589, -0.638121834629033, -0.642273812239728,
      -0.645406366983674, -0.647519498860871, -0.648613207871319,
      -0.648687494015019, -0.647687460711257, -0.645558211379322,
      -0.642299746019212, -0.637912064630930, -0.632395167214473,
      -0.625749053769843, -0.617973724297039, -0.609069178796061,
      -0.599035417266910, -0.587872439709585, -0.576731233416743,
      -0.566762785681043, -0.557967096502484, -0.550344165881066,
      -0.543893993816790, -0.538616580309654, -0.534511925359660,
      -0.531580028966807, -0.529820891131095;

  auto interpolator = pyinterp::detail::interpolation::CSpline<double>();
  auto y = interpolator(xa, ya, xp);
  for (auto ix = 0; ix < xp.size(); ix++) {
    EXPECT_NEAR(y(ix), yp(ix), 1e-6);
  }
  auto dy = interpolator.derivative(xa, ya, xp);
  for (auto ix = 0; ix < xp.size(); ix++) {
    EXPECT_NEAR(dy(ix), dyp(ix), 1e-6);
  }
}

TEST(CSpline, case_two) {
  Eigen::Matrix<double, Eigen::Dynamic, 1> xa(7);
  Eigen::Matrix<double, Eigen::Dynamic, 1> ya(7);
  Eigen::Matrix<double, Eigen::Dynamic, 1> xp(19);
  Eigen::Matrix<double, Eigen::Dynamic, 1> yp(19);
  Eigen::Matrix<double, Eigen::Dynamic, 1> dyp(19);

  xa << -1.2139767065644265, -0.792590494453907, -0.250954683125019,
      0.665867809951305, 0.735655088722706, 0.827622053027153,
      1.426592227816582;
  ya << -0.00453877449035645, 0.49763182550668716, 0.17805472016334534,
      0.40514493733644485, -0.21595209836959839, 0.47405586764216423,
      0.46561462432146072;

  xp << -1.2139767065644265, -1.0735146358609200, -0.9330525651574135,
      -0.7925904944539071, -0.6120452240109444, -0.4314999535679818,
      -0.2509546831250191, 0.0546528145670890, 0.3602603122591972,
      0.6658678099513053, 0.6891302362084388, 0.7123926624655723,
      0.7356550887227058, 0.7663107434908548, 0.7969663982590039,
      0.8276220530271530, 1.0272787779569625, 1.2269355028867721,
      1.4265922278165817;
  yp << -0.00453877449035645, 0.25816917628390590, 0.44938881397673230,
      0.49763182550668716, 0.31389980410075147, 0.09948951681196887,
      0.17805472016334534, 1.27633142487980233, 2.04936553432792001,
      0.40514493733644485, 0.13322324792901385, -0.09656315924697809,
      -0.21595209836959839, -0.13551147728045118, 0.13466779030061801,
      0.47405586764216423, 1.68064089899304370, 1.43594739539458649,
      0.46561462432146072;
  dyp << 1.955137555965937, 1.700662049790549, 0.937235531264386,
      -0.335141999612553, -1.401385073563169, -0.674982149482761,
      1.844066772628670, 4.202528085784793, -0.284432022227558,
      -11.616813551408383, -11.272731243226174, -7.994209291156876,
      -1.781247695200491, 6.373970868827501, 10.597456848997197,
      10.889210245308570, 1.803124267866902, -3.648527318598099,
      -5.465744514086432;

  auto interpolator = pyinterp::detail::interpolation::CSpline<double>();
  auto y = interpolator(xa, ya, xp);
  for (auto ix = 0; ix < xp.size(); ix++) {
    EXPECT_NEAR(y(ix), yp(ix), 1e-6);
  }
  auto dy = interpolator.derivative(xa, ya, xp);
  for (auto ix = 0; ix < xp.size(); ix++) {
    EXPECT_NEAR(dy(ix), dyp(ix), 1e-6);
  }
}

TEST(CSplinePeriodic, case_one) {
  Eigen::Matrix<double, Eigen::Dynamic, 1> xa(11);
  Eigen::Matrix<double, Eigen::Dynamic, 1> ya(11);
  Eigen::Matrix<double, Eigen::Dynamic, 1> xp(31);
  Eigen::Matrix<double, Eigen::Dynamic, 1> yp(31);

  xa << 0.000000000000000, 0.130153674349869, 0.164545962312740,
      0.227375461261537, 0.256465324353657, 0.372545206874658,
      0.520820016781720, 0.647654717733075, 0.753429306654340,
      0.900873984827658, 1.000000000000000;
  ;
  ya << 0.000000000000000, 0.729629261832041, 0.859286331568207,
      0.989913099419008, 0.999175006262120, 0.717928599519215,
      -0.130443237213363, -0.800267961158980, -0.999767873040527,
      -0.583333769240853, -0.000000000000000;
  ;

  xp << 0.000000000000000, 0.043384558116623, 0.086769116233246,
      0.130153674349869, 0.141617770337492, 0.153081866325116,
      0.164545962312740, 0.185489128629005, 0.206432294945271,
      0.227375461261537, 0.237072082292243, 0.246768703322951,
      0.256465324353657, 0.295158618527324, 0.333851912700991,
      0.372545206874658, 0.421970143510346, 0.471395080146033,
      0.520820016781720, 0.563098250432172, 0.605376484082623,
      0.647654717733075, 0.682912914040164, 0.718171110347252,
      0.753429306654340, 0.802577532712113, 0.851725758769885,
      0.900873984827658, 0.933915989885105, 0.966957994942553,
      1.000000000000000;
  yp << 0.000000000000000, 0.268657574670719, 0.517940878523929,
      0.729629261832041, 0.777012551497867, 0.820298314554859,
      0.859286331568207, 0.918833991960315, 0.962624749226346,
      0.989913099419008, 0.996756196601349, 0.999858105635752,
      0.999175006262120, 0.959248551766306, 0.863713527741856,
      0.717928599519215, 0.470065187871106, 0.177694938589523,
      -0.130443237213363, -0.385093922365765, -0.613840011545983,
      -0.800267961158980, -0.912498361131651, -0.980219217412290,
      -0.999767873040528, -0.943635958253643, -0.800314354800596,
      -0.583333769240853, -0.403689914131666, -0.206151346799382,
      -0.000000000000000;

  auto interpolator =
      pyinterp::detail::interpolation::CSplinePeriodic<double>();
  auto y = interpolator(xa, ya, xp);
  for (auto ix = 0; ix < xp.size(); ix++) {
    EXPECT_NEAR(y(ix), yp(ix), 1e-6);
  }
}
